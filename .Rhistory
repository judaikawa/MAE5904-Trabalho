}
valida[nsim,1] <- nsim
valida[nsim,2] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[1,2])
valida[nsim,3] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[2,2])
}
valida2 <- valida %>% gather(key = dado, value = value, 2:3)
ggplot(data = valida2, aes(x = nsim, y = value, color = dado)) +geom_line()
ggplot(data = valida2, aes(x = nsim, y = value, color = dado)) +
geom_line() +
labs(title = "Simulador Monty Hall", x = "Número de Simulações",
y = "Probabilidade de ganhar carro",
color = "Escolha Inicial")
ggplot(data = valida2, aes(x = nsim, y = value, color = dado)) +
geom_line() +
labs(title = "Simulador Monty Hall", x = "Número de Simulações",
y = "Probabilidade de ganhar carro",
color = "Escolha Inicial")+
theme_bw()
np <- 20
pa <- 1
set.seed(1)
jogo <- data.frame(carro = integer(),
escolha = integer(),
exclui = integer(),
muda = integer(),
nesc = integer(),
ganha = integer())
valida <- data.frame(nsim = integer(),
mantem = numeric(),
muda = numeric())
for (nsim in 1:1000){
for (i in 1:nsim){
jogo[i,1] <- sample(np,1)
jogo[i,2] <- sample(np,1)
a <- 1:np
jogo[i,3] <- ifelse(length(a[-c(jogo[i,1],jogo[i,2])]) == 1,
a[-c(jogo[i,1],jogo[i,2])],
sample(a[-c(jogo[i,1],jogo[i,2])],1,replace = FALSE))
jogo$muda[i] <- sample(c(1,0),1)
jogo$nesc[i] <- ifelse(jogo$muda[i]==0,
jogo$escolha[i],
ifelse(length(a[-c(jogo[i,3],jogo[i,2])]) == 1,
a[-c(jogo[i,3],jogo[i,2])],
sample(a[-c(jogo[i,3],jogo[i,2])],1,replace = FALSE)))
jogo$ganha[i] <- ifelse(jogo$nesc[i] == jogo$carro[i],1,0 )
}
valida[nsim,1] <- nsim
valida[nsim,2] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[1,2])
valida[nsim,3] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[2,2])
}
valida2 <- valida %>% gather(key = dado, value = value, 2:3)
ggplot(data = valida2, aes(x = nsim, y = value, color = dado)) +
geom_line() +
labs(title = "Simulador Monty Hall", x = "Número de Simulações",
y = "Probabilidade de ganhar carro",
color = "Escolha Inicial")+
theme_bw()
np <- 5
pa <- 1
set.seed(1)
jogo <- data.frame(carro = integer(),
escolha = integer(),
exclui = integer(),
muda = integer(),
nesc = integer(),
ganha = integer())
valida <- data.frame(nsim = integer(),
mantem = numeric(),
muda = numeric())
for (nsim in 1:1000){
for (i in 1:nsim){
jogo[i,1] <- sample(np,1)
jogo[i,2] <- sample(np,1)
a <- 1:np
jogo[i,3] <- ifelse(length(a[-c(jogo[i,1],jogo[i,2])]) == 1,
a[-c(jogo[i,1],jogo[i,2])],
sample(a[-c(jogo[i,1],jogo[i,2])],1,replace = FALSE))
jogo$muda[i] <- sample(c(1,0),1)
jogo$nesc[i] <- ifelse(jogo$muda[i]==0,
jogo$escolha[i],
ifelse(length(a[-c(jogo[i,3],jogo[i,2])]) == 1,
a[-c(jogo[i,3],jogo[i,2])],
sample(a[-c(jogo[i,3],jogo[i,2])],1,replace = FALSE)))
jogo$ganha[i] <- ifelse(jogo$nesc[i] == jogo$carro[i],1,0 )
}
valida[nsim,1] <- nsim
valida[nsim,2] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[1,2])
valida[nsim,3] <- as.vector((jogo %>% group_by(muda) %>%
summarise(acertos = mean(ganha)))[2,2])
}
valida2 <- valida %>% gather(key = dado, value = value, 2:3)
ggplot(data = valida2, aes(x = nsim, y = value, color = dado)) +
geom_line() +
labs(title = "Simulador Monty Hall", x = "Número de Simulações",
y = "Probabilidade de ganhar carro",
color = "Escolha Inicial")+
theme_bw()
monty<-function(strat='stay',N=1000,print_games=TRUE)
{
doors<-1:3 #initialize the doors behind one of which is a good prize
win<-0 #to keep track of number of wins
for(i in 1:N)
{
prize<-floor(runif(1,1,4)) #randomize which door has the good prize
guess<-floor(runif(1,1,4)) #guess a door at random
## Reveal one of the doors you didn't pick which has a bum prize
if(prize!=guess)
reveal<-doors[-c(prize,guess)]
else
reveal<-sample(doors[-c(prize,guess)],1)
## Stay with your initial guess or switch
if(strat=='switch')
select<-doors[-c(reveal,guess)]
if(strat=='stay')
select<-guess
if(strat=='random')
select<-sample(doors[-reveal],1)
## Count up your wins
if(select==prize)
{
win<-win+1
outcome<-'Winner!'
}else
outcome<-'Losser!'
if(print_games)
cat(paste('Guess: ',guess,
'\nRevealed: ',reveal,
'\nSelection: ',select,
'\nPrize door: ',prize,
'\n',outcome,'\n\n',sep=''))
}
cat(paste('Using the ',strat,' strategy, your win percentage was ',win/N*100,'%\n',sep='')) #Print the win percentage of your strategy
}
monty(strat = "switch")
monty(strat = "random")
monty(strat = "stay")
monty(strat = "stay")
monty(strat = "stay")
monty(strat = "stay")
monty(strat = "stay")
library(tidyverse)
library(readr)
library(readxl)
#Leitura dos dados (alterar endereço para o arquivo)
dados <- read_excel("C:/Users/bcast/Documents/Pesquisa/Mestrado/Matérias/PSP5117 - Análise de Dados Epidemiológicos/Aula 1/Poblacion50000PAS.xls")
#Para que randomização seja reprodutível
set.seed(1)
#cria base geral vazia para médias e intervalos de confiança
db <- data.frame(i = numeric (),
m = numeric(),
ciup = numeric(),
cidn = numeric(),
stringsAsFactors=FALSE)
#cria base geral para coletar o percentual de casos cuja média está fora do intervalo de confiança
df = data.frame(g = numeric())
#coleta o percentual de casos em que a média está fora do intervalo de confiança
tests <- 1000
for (k in 1:tests){
#repete a amostragem spls vezes
spls <- 100
#Loop para coletar casos de amostras de n indivíduos da população
for (i in 1:spls) {
#tamanho da amostra
n <- 9
#Faz o sampling de uma amostra de n unidades
avPAS <- sample(dados$PAS, n)
#média e desvio padrão
m <- mean(avPAS)
s <- sd(avPAS)
#Erro e intervalo de confiança
e <- qt(0.975, df = n-1)*s/sqrt(n)
ciup <- m + e
cidn <- m - e
#inclui dados na base db
db[i,] <- cbind(i, m, ciup, cidn)
}
#inclui número de casos fora na base df
df[k,] <- (db %>% filter (db$ciup <= mean(dados$PAS) | cidn >= mean(dados$PAS)) %>%
summarise(l = n()/spls))[1,1]
}
#cria gráfico de intervalo de confiança
ggplot() +
geom_point(data = db, aes(x= i, y = m), size = 1, color = ifelse((db$ciup <= mean(dados$PAS) | db$cidn >= mean(dados$PAS)),"red", "black")) +
geom_errorbar(width=.1, aes(ymin=cidn, ymax=ciup, x = i), data = db, color = ifelse((db$ciup <= mean(dados$PAS) | db$cidn >= mean(dados$PAS)),"red", "black")) +
geom_hline(yintercept = mean(dados$PAS)) +
scale_y_continuous(limits = c(min(db$cidn), max(db$ciup))) +
theme_bw()+
labs(x = "Amostra", y = "Estimativa", title = "Intervalo de confiança")
#Para que randomização seja reprodutível
set.seed(1)
#cria base geral vazia para médias e intervalos de confiança
db <- data.frame(i = numeric (),
m = numeric(),
ciup = numeric(),
cidn = numeric(),
stringsAsFactors=FALSE)
#cria base geral para coletar o percentual de casos cuja média está fora do intervalo de confiança
df = data.frame(g = numeric())
#coleta o percentual de casos em que a média está fora do intervalo de confiança
tests <- 1000
for (k in 1:tests){
#repete a amostragem spls vezes
spls <- 100
#Loop para coletar casos de amostras de n indivíduos da população
for (i in 1:spls) {
#tamanho da amostra
n <- 15
#Faz o sampling de uma amostra de n unidades
avPAS <- sample(dados$PAS, n)
#média e desvio padrão
m <- mean(avPAS)
s <- sd(avPAS)
#Erro e intervalo de confiança
e <- qt(0.975, df = n-1)*s/sqrt(n)
ciup <- m + e
cidn <- m - e
#inclui dados na base db
db[i,] <- cbind(i, m, ciup, cidn)
}
#inclui número de casos fora na base df
df[k,] <- (db %>% filter (db$ciup <= mean(dados$PAS) | cidn >= mean(dados$PAS)) %>%
summarise(l = n()/spls))[1,1]
}
#cria gráfico de intervalo de confiança
ggplot() +
geom_point(data = db, aes(x= i, y = m), size = 1, color = ifelse((db$ciup <= mean(dados$PAS) | db$cidn >= mean(dados$PAS)),"red", "black")) +
geom_errorbar(width=.1, aes(ymin=cidn, ymax=ciup, x = i), data = db, color = ifelse((db$ciup <= mean(dados$PAS) | db$cidn >= mean(dados$PAS)),"red", "black")) +
geom_hline(yintercept = mean(dados$PAS)) +
scale_y_continuous(limits = c(min(db$cidn), max(db$ciup))) +
theme_bw()+
labs(x = "Amostra", y = "Estimativa", title = "Intervalo de confiança")
mean(dados$PAS)
library(tidyverse)
library(lubridate)
library(readxl)
setwd("C:/Users/bcast/Documents/Pesquisa/Mestrado/Matérias/MAE5904 - Aprendizagem Estatística/Projeto/MAE5904-Trabalho")
setwd("C:/Users/bcast/Documents/Pesquisa/Mestrado/Matérias/MAE5904 - Aprendizagem Estatística/Projeto/MAE5904-Trabalho")
SIM <- read.csv("HomicidiosTabnet.csv")
SIM <- read.csv2("HomicidiosTabnet.csv")
SIM <- read.csv2("HomicidiosTabnet.csv")
SIM
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic")
SIM
SIM <- read.csv2("HomicidiosTabnet.csv")
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 1:23)
SIM
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23)
SIM
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6))
SIM
SIM %>% filter(COD_MUN == 110037)
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6), Ano = substr(Ano,2,5))
SIM %>% filter(COD_MUN == 110037)
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6),
Ano = as.numeric(substr(Ano,2,5)),
homic = as.numeric(if_else(homic == "-",0,homic)))
SIM %>% filter(COD_MUN == 110037)
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6),
Ano = as.numeric(substr(Ano,2,5)),
homic = as.numeric(homic))
SIM %>% filter(COD_MUN == 110037)
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6),
Ano = as.numeric(substr(Ano,2,5)),
homic = replace_na(as.numeric(homic),0))
SIM %>% filter(COD_MUN == 110037)
SIM %>% filter(COD_MUN == 110037) %>% summarize(sum(homic))
SIM <- read.csv2("HomicidiosTabnet.csv") %>%
gather(key = "Ano", value = "homic", 2:23) %>%
mutate(COD_MUN = substr(Município,1,6),
Ano = as.numeric(substr(Ano,2,5)),
homic = replace_na(as.numeric(homic),0)) %>%
select(COD_MUN, Ano, homic)
SIM %>% filter(COD_MUN == 110037)
SIM <- read_csv("C:/DATASUS/SIMHomic19962017.csv")
library(tidyverse)
library(lubridate)
library(readxl)
setwd("C:/Users/bcast/Documents/Pesquisa/Mestrado/Matérias/MAE5904 - Aprendizagem Estatística/Projeto/MAE5904-Trabalho")
SIM <- read_csv("C:/DATASUS/SIMHomic19962017.csv")
SIM$DTOBITO <- dmy(SIM$DTOBITO)
SIM$DTNASC <- dmy(SIM$DTNASC)
SIM$IDADEC <- floor((SIM$DTOBITO - SIM$DTNASC)/365.25)
popBR <- read_csv("C:/Users/bcast/Documents/Amgen/Populacao/PopFinal.csv")
popBR$Sexo <- as.factor(popBR$Sexo)
popBR$FaixaEtr <- as.factor(popBR$FaixaEtr)
levels(popBR$FaixaEtr) <- gsub("\\.", " ", levels(popBR$FaixaEtr))
popBR$FaixaEtr <- fct_relevel(popBR$FaixaEtr , "5 a 9 anos", after = 1)
popBR <- popBR %>% group_by(CD_MUNIC, ano, FaixaEtr) %>% summarize(Pop = sum(Pop))
popBR <- rbind(popBR, popBR %>%  filter( ano %in% c(2014,2015)) %>%
spread(ano,Pop) %>% mutate(Pop = 2*`2015`-`2014`, ano = 2016) %>%
select(CD_MUNIC, ano, FaixaEtr, Pop))
fxet <- read_excel("C:/Users/bcast/Documents/Amgen/Populacao/FaixaEtaria.xlsx",
sheet= "Planilha1")
fxet$FaixaEtr <- as.factor(fxet$FaixaEtr)
levels(fxet$FaixaEtr) <- gsub('\\.', ' ', levels(fxet$FaixaEtr))
fxet$FaixaEtr  <- fct_relevel(fxet$FaixaEtr , "5 a 9 anos", after = 1)
SIM <- SIM %>% left_join(fxet, by = c("IDADEC"="Idade"))
SIMConsol <- SIM %>% mutate(ano = year(DTOBITO), CODMUNRES = if_else(ano >= 2006, CODMUNRES,as.integer(substr(as.character(CODMUNRES),1,6))),
CID = substr(CAUSABAS,1,3)) %>%
group_by(ano, CID,CODMUNRES, FaixaEtr) %>%
summarise(obitos = n())
SIM %>% mutate(ano = year(DTOBITO), CODMUNRES = if_else(ano >= 2006, CODMUNRES,as.integer(substr(as.character(CODMUNRES),1,6))),
CID = substr(CAUSABAS,1,3))
SIMConsol <- SIM %>% mutate(ano = year(DTOBITO), CODMUNRES = if_else(ano >= 2006, CODMUNRES,as.double(substr(as.character(CODMUNRES),1,6))),
CID = substr(CAUSABAS,1,3)) %>%
group_by(ano, CID,CODMUNRES, FaixaEtr) %>%
summarise(obitos = n())
#Standard WHO 2000 - 2015 World Population
stdpop <- read_excel("Data/StdPopulation.xlsx", sheet = "Planilha2")
#Standard WHO 2000 - 2015 World Population
stdpop <- read_excel("C:/Users/bcast/Documents/Pesquisa/Mestrado/Projeto/Data/StdPopulation.xlsx", sheet = "Planilha2")
#Standard WHO 2000 - 2015 World Population
stdpop <- read_excel("C:/Users/bcast/Documents/Pesquisa/Mestrado/Projeto/MortalidadeCancer/Data/StdPopulation.xlsx", sheet = "Planilha2")
stdpop$FaixaEtr <- as.factor(stdpop$FaixaEtr)
stdpop$FaixaEtr  <- fct_relevel(stdpop$FaixaEtr , "5 a 9 anos", after = 1)
rm(SIM, fxet)
SIMCFilt <- SIMConsol %>% group_by(CODMUNRES,ano, FaixaEtr) %>% summarise(obitos = sum(obitos))
#Consolidando anos para reduzir flutuaÃ§Ã£o aleatÃ³ria
SIMCFilt <- SIMCFilt %>% filter(ano %in% c(2007:2016)) %>% group_by(CODMUNRES, FaixaEtr) %>%
summarise(obitos = sum(obitos)/10) %>% mutate(ano = 2012)
taxas <-  popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop) %>%
group_by(CD_MUNIC, ano) %>% summarise(Pop = sum(Pop), Obitos = sum(obitos),
PopPad = sum(WHO20002025),  Obtadj = sum(obtadj)) %>%
mutate(tx = Obitos*100000/Pop, txadj = Obtadj*100000/PopPad)
#filtra ano
fano <- 2012
#Consolidando anos para reduzir flutuaÃ§Ã£o aleatÃ³ria
SIMCFilt <- SIMCFilt %>% filter(ano %in% c(2008:2017)) %>% group_by(CODMUNRES, FaixaEtr) %>%
summarise(obitos = sum(obitos)/10) %>% mutate(ano = 2013)
taxas <-  popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop) %>%
group_by(CD_MUNIC, ano) %>% summarise(Pop = sum(Pop), Obitos = sum(obitos),
PopPad = sum(WHO20002025),  Obtadj = sum(obtadj)) %>%
mutate(tx = Obitos*100000/Pop, txadj = Obtadj*100000/PopPad)
#filtra ano
fano <- 2013
taxas <- taxas %>% filter(ano == fano)
taxas
SIM %>% filter(CD_MUNIC == 110001)
SIMConsol %>% filter(CD_MUNIC == 110001)
SIMConsol %>% filter(CODMUNRES == 110001)
SIMConsol %>% filter(CODMUNRES == 110001 and ano %in% c(2008:2017))
SIMConsol %>% filter(CODMUNRES == 110001 ano %in% c(2008:2017))
SIMConsol %>% filter(CODMUNRES == 110001 & ano %in% c(2008:2017))
SIM <- read_csv("C:/DATASUS/SIMHomic19962017.csv")
SIM$DTOBITO <- dmy(SIM$DTOBITO)
SIM$DTNASC <- dmy(SIM$DTNASC)
SIM$IDADEC <- floor((SIM$DTOBITO - SIM$DTNASC)/365.25)
popBR <- read_csv("C:/Users/bcast/Documents/Amgen/Populacao/PopFinal.csv")
popBR$Sexo <- as.factor(popBR$Sexo)
popBR$FaixaEtr <- as.factor(popBR$FaixaEtr)
levels(popBR$FaixaEtr) <- gsub("\\.", " ", levels(popBR$FaixaEtr))
popBR$FaixaEtr <- fct_relevel(popBR$FaixaEtr , "5 a 9 anos", after = 1)
popBR <- popBR %>% group_by(CD_MUNIC, ano, FaixaEtr) %>% summarize(Pop = sum(Pop))
popBR <- rbind(popBR, popBR %>%  filter( ano %in% c(2014,2015)) %>%
spread(ano,Pop) %>% mutate(Pop = 2*`2015`-`2014`, ano = 2016) %>%
select(CD_MUNIC, ano, FaixaEtr, Pop))
fxet <- read_excel("C:/Users/bcast/Documents/Amgen/Populacao/FaixaEtaria.xlsx",
sheet= "Planilha1")
fxet$FaixaEtr <- as.factor(fxet$FaixaEtr)
levels(fxet$FaixaEtr) <- gsub('\\.', ' ', levels(fxet$FaixaEtr))
fxet$FaixaEtr  <- fct_relevel(fxet$FaixaEtr , "5 a 9 anos", after = 1)
SIM <- SIM %>% left_join(fxet, by = c("IDADEC"="Idade"))
View(SIM)
SIMConsol <- SIM %>% mutate(ano = year(DTOBITO), CODMUNRES = if_else(ano >= 2006, CODMUNRES,as.double(substr(as.character(CODMUNRES),1,6))),
CID = substr(CAUSABAS,1,3)) %>%
group_by(ano, CID,CODMUNRES, FaixaEtr) %>%
summarise(obitos = n())
SIMConsol
SIMConsol %>% filter(CODMUNRES == 110001 & ano %in% c(2008:2017)) %>% summarise(sum(obitos))
SIMConsol %>% filter(CODMUNRES == 110001 & ano %in% c(2008:2017)) %>% group_by(FaixaEtr) %>% summarise(sum(obitos))
SIM$IDADEC <- if_else(is.na(SIM$IDADEC),if_else(SIM$IDADE>=400,SIM$IDADE-400,0),SIM$IDADEC)
SIM$IDADEC <- if_else(is.na(SIM$IDADEC),if_else(as.numeric(SIM$IDADE)>=400,as.numeric(SIM$IDADE)-400,0),SIM$IDADEC)
SIM$IDADEC <- if_else(is.na(SIM$IDADEC),if_else(as.numeric(SIM$IDADE)>=400,as.numeric(SIM$IDADE)-400,0),as.numeric(SIM$IDADEC))
View(SIM)
SIM <- read_csv("C:/DATASUS/SIMHomic19962017.csv")
SIM$DTOBITO <- dmy(SIM$DTOBITO)
SIM$DTNASC <- dmy(SIM$DTNASC)
SIM$IDADEC <- floor((SIM$DTOBITO - SIM$DTNASC)/365.25)
SIM$IDADEC <- if_else(is.na(SIM$IDADEC),if_else(as.numeric(SIM$IDADE)>=400,as.numeric(SIM$IDADE)-400,0),as.numeric(SIM$IDADEC))
SIM <- SIM %>% left_join(fxet, by = c("IDADEC"="Idade"))
SIMConsol <- SIM %>% mutate(ano = year(DTOBITO), CODMUNRES = if_else(ano >= 2006, CODMUNRES,as.double(substr(as.character(CODMUNRES),1,6))),
CID = substr(CAUSABAS,1,3)) %>%
group_by(ano, CID,CODMUNRES, FaixaEtr) %>%
summarise(obitos = n())
#Standard WHO 2000 - 2015 World Population
stdpop <- read_excel("C:/Users/bcast/Documents/Pesquisa/Mestrado/Projeto/MortalidadeCancer/Data/StdPopulation.xlsx", sheet = "Planilha2")
stdpop$FaixaEtr <- as.factor(stdpop$FaixaEtr)
stdpop$FaixaEtr  <- fct_relevel(stdpop$FaixaEtr , "5 a 9 anos", after = 1)
rm(SIM, fxet)
SIMCFilt <- SIMConsol %>% group_by(CODMUNRES,ano, FaixaEtr) %>% summarise(obitos = sum(obitos))
SIMCFilt <- SIMConsol %>% group_by(CODMUNRES,ano, FaixaEtr) %>% summarise(obitos = sum(obitos))
#Consolidando anos para reduzir flutuaÃ§Ã£o aleatÃ³ria
SIMCFilt <- SIMCFilt %>% filter(ano %in% c(2008:2017)) %>% group_by(CODMUNRES, FaixaEtr) %>%
summarise(obitos = sum(obitos)/10) %>% mutate(ano = 2013)
taxas <-  popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop) %>%
group_by(CD_MUNIC, ano) %>% summarise(Pop = sum(Pop), Obitos = sum(obitos),
PopPad = sum(WHO20002025),  Obtadj = sum(obtadj)) %>%
mutate(tx = Obitos*100000/Pop, txadj = Obtadj*100000/PopPad)
popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop)
popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop) %>%
group_by(CD_MUNIC, ano) %>% summarise(Pop = sum(Pop), Obitos = sum(obitos),
PopPad = sum(WHO20002025),  Obtadj = sum(obtadj))
taxas <-  popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop)
#filtra ano
fano <- 2013
taxas <- taxas %>% filter(ano == fano)
taxas
0.7*82171/2442
taxas <-  popBR%>% left_join(stdpop, by = "FaixaEtr") %>%
left_join(SIMCFilt, by = c("CD_MUNIC" = "CODMUNRES", "ano" = "ano", "FaixaEtr" = "FaixaEtr")) %>%
replace_na(list(obitos = 0)) %>% mutate(obtadj = obitos*WHO20002025/Pop) %>%
group_by(CD_MUNIC, ano) %>% summarise(Pop = sum(Pop), Obitos = sum(obitos),
PopPad = sum(WHO20002025),  Obtadj = sum(obtadj)) %>%
mutate(tx = Obitos*100000/Pop, txadj = Obtadj*100000/PopPad)
#filtra ano
fano <- 2013
taxas <- taxas %>% filter(ano == fano)
taxas
View(SIMCFilt)
#percentual de mortes com idade não especificada
SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitos = sum(obitos))
#percentual de mortes com idade não especificada
SIMCFilt %>% filter(is.na(FaixaEtr)) %>% ungroup %>% summarise(obitos = sum(obitos))
SIMCFilt %>% ungroup %>% summarise(obitos = sum(obitos))
SIMCFilt %>% summarise(obitos = sum(obitos)) left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% ungroup %>% summarise(obitos = sum(obitos)))
SIMCFilt %>% summarise(obitos = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% ungroup %>% summarise(obitos = sum(obitos)))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% ungroup %>% summarise(obitosNA = sum(obitos)))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = sum(obitos)))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace.na(sum(obitos)),0)) %>% mutate(PercNA = (obitosNA/ObitosTot))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace_na(sum(obitos)),0)) %>% mutate(PercNA = (obitosNA/ObitosTot))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace_na(sum(obitos)),0)) %>% mutate(PercNA = (obitosNA/obitosTot))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace_na(sum(obitos),0))) %>% mutate(PercNA = (obitosNA/obitosTot))
SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace_na(sum(obitos),0))) %>% mutate(PercNA = (obitosNA/obitosTot)) %>%
arrange(desc(PercNA))
mortesna <- SIMCFilt %>% summarise(obitosTot = sum(obitos)) %>%  left_join(SIMCFilt %>% filter(is.na(FaixaEtr)) %>% summarise(obitosNA = replace_na(sum(obitos),0))) %>% mutate(PercNA = (obitosNA/obitosTot)) %>%
arrange(desc(PercNA))
mean(mortesna$PercNA, na.rm = TRUE)
View(mortesna)
taxas %>% filter(CD_MUNIC == 314780)
set <- read_csv("Data/SocioHealthVar.csv") %>%
left_join(taxas, by = c("Municipality_code" = "CD_MUNIC"))
set$X1 <- NULL
set$Residents <- set$Pop
set <- set %>% select(-ano, -Pop, -PopPad, -Obtadj)
#carregadados de cidades
set <- read_csv("SocioHealthVar.csv") %>%
left_join(taxas, by = c("Municipality_code" = "CD_MUNIC"))
#carregadados de cidades
set <- read_csv("Data_set_socioeconomic_characteristics.csv") %>%
left_join(taxas, by = c("Municipality_code" = "CD_MUNIC"))
#carregadados de cidades
set <- read_csv2("Data_set_socioeconomic_characteristics.csv") %>%
left_join(taxas, by = c("Municipality_code" = "CD_MUNIC"))
set$X1 <- NULL
set$Residents <- set$Pop
set <- set %>% select(-ano, -Pop, -PopPad, -Obtadj)
set
save(SIMCFilt, taxas, set)
save(SIMCFilt, taxas, set, file = "IntermMortDataPrep.RData")
write.csv2(taxas, "Taxas.csv")
taxas
taxas %>% left_join(mortesna)
taxas %>% left_join(mortesna, by = c('CD_MUNIC'='CODMUNRES'))
taxas %>% left_join(mortesna, by = c('CD_MUNIC'='CODMUNRES')) %>%
mutate(Obitos = obitosTot, tx = obitosTot*100000/Pop)
taxas %>% left_join(mortesna, by = c('CD_MUNIC'='CODMUNRES')) %>%
mutate(Obitos = obitosTot, tx = obitosTot*100000/Pop) %>%
select(-obitosTot, obitosNA, PercNA)
taxas %>% left_join(mortesna, by = c('CD_MUNIC'='CODMUNRES')) %>%
mutate(Obitos = obitosTot, tx = obitosTot*100000/Pop) %>%
select(-obitosTot, -obitosNA, -PercNA)
save(SIMCFilt, taxas, set, file = "IntermMortDataPrep.RData")
write.csv2(taxas, "Taxas.csv")
#carregadados de cidades
set <- read_csv2("Data_set_socioeconomic_characteristics.csv") %>%
left_join(taxas, by = c("Municipality_code" = "CD_MUNIC"))
set$X1 <- NULL
set$Residents <- set$Pop
set <- set %>% select(-ano, -Pop, -PopPad, -Obtadj)
write.csv2(set, "TabelaCompleta.csv")
hist(taxas$tx)
hist(taxas$tx, breaks = 50)
